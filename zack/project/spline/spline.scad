

rotate(a = 15, v = [1, 0, 0]) {
	translate(v = [9.3738563711, 8.3323167743, 2.6980018542]) {
		scale(v = [4.9809265000, 7.8864669584, 10.3769302084]) {
			polyhedron(points = [[0.0000000000, 0.3, 0], [0.0000000000, 1.0, 0], [0.0000000000, 0.6, 1], [0.0000000000, 2.0, 1], [0.2500000000, 0.3, 0], [0.2500000000, 1.0, 0], [0.2500000000, 0.609512923763, 1], [0.2500000000, 2.03170974588, 1], [0.5000000000, 0.3, 0], [0.5000000000, 1.0, 0], [0.5000000000, 0.611126499369, 1], [0.5000000000, 2.03708833123, 1], [0.7500000000, 0.3, 0], [0.7500000000, 1.0, 0], [0.7500000000, 0.607756377051, 1], [0.7500000000, 2.02585459017, 1], [1.0000000000, 0.3, 0], [1.0000000000, 1.0, 0], [1.0000000000, 0.60231820704, 1], [1.0000000000, 2.0077273568, 1], [1.2500000000, 0.3, 0], [1.2500000000, 1.0, 0], [1.2500000000, 0.597644944852, 1], [1.2500000000, 1.99214981617, 1], [1.5000000000, 0.3, 0], [1.5000000000, 1.0, 0], [1.5000000000, 0.595085010425, 1], [1.5000000000, 1.98361670142, 1], [1.7500000000, 0.3, 0], [1.7500000000, 1.0, 0], [1.7500000000, 0.594702740119, 1], [1.7500000000, 1.98234246706, 1], [2.0000000000, 0.3, 0], [2.0000000000, 1.0, 0], [2.0000000000, 0.596520130596, 1], [2.0000000000, 1.98840043532, 1], [2.2500000000, 0.3, 0], [2.2500000000, 1.0, 0], [2.2500000000, 0.600558486788, 1], [2.2500000000, 2.00186162263, 1], [2.5000000000, 0.3, 0], [2.5000000000, 1.0, 0], [2.5000000000, 0.606150149062, 1], [2.5000000000, 2.02050049687, 1], [2.7500000000, 0.3, 0], [2.7500000000, 1.0, 0], [2.7500000000, 0.610645647053, 1], [2.7500000000, 2.03548549018, 1], [3.0000000000, 0.3, 0], [3.0000000000, 1.0, 0], [3.0000000000, 0.611041343878, 1], [3.0000000000, 2.03680447959, 1], [3.2500000000, 0.3, 0], [3.2500000000, 1.0, 0], [3.2500000000, 0.604333602649, 1], [3.2500000000, 2.01444534216, 1], [3.5000000000, 0.3, 0], [3.5000000000, 1.0, 0], [3.5000000000, 0.588259338962, 1], [3.5000000000, 1.96086446321, 1], [3.7500000000, 0.3, 0], [3.7500000000, 1.0, 0], [3.7500000000, 0.569164391022, 1], [3.7500000000, 1.89721463674, 1], [4.0000000000, 0.3, 0], [4.0000000000, 1.0, 0], [4.0000000000, 0.558948740648, 1], [4.0000000000, 1.86316246883, 1], [4.2500000000, 0.3, 0], [4.2500000000, 1.0, 0], [4.2500000000, 0.569604938723, 1], [4.2500000000, 1.89868312908, 1], [4.5000000000, 0.3, 0], [4.5000000000, 1.0, 0], [4.5000000000, 0.6130588585, 1], [4.5000000000, 2.04352952833, 1], [4.7500000000, 0.3, 0], [4.7500000000, 1.0, 0], [4.7500000000, 0.690409593563, 1], [4.7500000000, 2.30136531188, 1], [5.0000000000, 0.3, 0], [5.0000000000, 1.0, 0], [5.0000000000, 0.780052505527, 1], [5.0000000000, 2.60017501842, 1], [5.2500000000, 0.3, 0], [5.2500000000, 1.0, 0], [5.2500000000, 0.857524152752, 1], [5.2500000000, 2.85841384251, 1], [5.5000000000, 0.3, 0], [5.5000000000, 1.0, 0], [5.5000000000, 0.8983610936, 1], [5.5000000000, 2.99453697867, 1], [5.7500000000, 0.3, 0], [5.7500000000, 1.0, 0], [5.7500000000, 0.881927879534, 1], [5.7500000000, 2.93975959845, 1], [6.0000000000, 0.3, 0], [6.0000000000, 1.0, 0], [6.0000000000, 0.817989800251, 1], [6.0000000000, 2.7266326675, 1], [6.2500000000, 0.3, 0], [6.2500000000, 1.0, 0], [6.2500000000, 0.730809413787, 1], [6.2500000000, 2.43603137929, 1], [6.5000000000, 0.3, 0], [6.5000000000, 1.0, 0], [6.5000000000, 0.644738560817, 1], [6.5000000000, 2.14912853606, 1], [6.7500000000, 0.3, 0], [6.7500000000, 1.0, 0], [6.7500000000, 0.583908178394, 1], [6.7500000000, 1.94636059465, 1], [7.0000000000, 0.3, 0], [7.0000000000, 1.0, 0], [7.0000000000, 0.559194986262, 1], [7.0000000000, 1.86398328754, 1], [7.2500000000, 0.3, 0], [7.2500000000, 1.0, 0], [7.2500000000, 0.560931667335, 1], [7.2500000000, 1.86977222445, 1], [7.5000000000, 0.3, 0], [7.5000000000, 1.0, 0], [7.5000000000, 0.577683675552, 1], [7.5000000000, 1.92561225184, 1], [7.7500000000, 0.3, 0], [7.7500000000, 1.0, 0], [7.7500000000, 0.598016464851, 1], [7.7500000000, 1.99338821617, 1], [8.0000000000, 0.3, 0], [8.0000000000, 1.0, 0], [8.0000000000, 0.611937349139, 1], [8.0000000000, 2.0397911638, 1], [8.2500000000, 0.3, 0], [8.2500000000, 1.0, 0], [8.2500000000, 0.617521862635, 1], [8.2500000000, 2.05840620878, 1], [8.5000000000, 0.3, 0], [8.5000000000, 1.0, 0], [8.5000000000, 0.615650407776, 1], [8.5000000000, 2.05216802592, 1], [8.7500000000, 0.3, 0], [8.7500000000, 1.0, 0], [8.7500000000, 0.60720620313, 1], [8.7500000000, 2.0240206771, 1], [9.0000000000, 0.3, 0], [9.0000000000, 1.0, 0], [9.0000000000, 0.593175160683, 1], [9.0000000000, 1.97725053561, 1], [9.2500000000, 0.3, 0], [9.2500000000, 1.0, 0], [9.2500000000, 0.577657691206, 1], [9.2500000000, 1.92552563735, 1], [9.5000000000, 0.3, 0], [9.5000000000, 1.0, 0], [9.5000000000, 0.568354893409, 1], [9.5000000000, 1.89451631136, 1], [9.7500000000, 0.3, 0], [9.7500000000, 1.0, 0], [9.7500000000, 0.573168439078, 1], [9.7500000000, 1.91056146359, 1]], triangles = [[0, 2, 4], [2, 6, 4], [5, 3, 1], [5, 7, 3], [4, 1, 0], [4, 5, 1], [2, 3, 6], [3, 7, 6], [4, 6, 8], [6, 10, 8], [9, 7, 5], [9, 11, 7], [8, 5, 4], [8, 9, 5], [6, 7, 10], [7, 11, 10], [8, 10, 12], [10, 14, 12], [13, 11, 9], [13, 15, 11], [12, 9, 8], [12, 13, 9], [10, 11, 14], [11, 15, 14], [12, 14, 16], [14, 18, 16], [17, 15, 13], [17, 19, 15], [16, 13, 12], [16, 17, 13], [14, 15, 18], [15, 19, 18], [16, 18, 20], [18, 22, 20], [21, 19, 17], [21, 23, 19], [20, 17, 16], [20, 21, 17], [18, 19, 22], [19, 23, 22], [20, 22, 24], [22, 26, 24], [25, 23, 21], [25, 27, 23], [24, 21, 20], [24, 25, 21], [22, 23, 26], [23, 27, 26], [24, 26, 28], [26, 30, 28], [29, 27, 25], [29, 31, 27], [28, 25, 24], [28, 29, 25], [26, 27, 30], [27, 31, 30], [28, 30, 32], [30, 34, 32], [33, 31, 29], [33, 35, 31], [32, 29, 28], [32, 33, 29], [30, 31, 34], [31, 35, 34], [32, 34, 36], [34, 38, 36], [37, 35, 33], [37, 39, 35], [36, 33, 32], [36, 37, 33], [34, 35, 38], [35, 39, 38], [36, 38, 40], [38, 42, 40], [41, 39, 37], [41, 43, 39], [40, 37, 36], [40, 41, 37], [38, 39, 42], [39, 43, 42], [40, 42, 44], [42, 46, 44], [45, 43, 41], [45, 47, 43], [44, 41, 40], [44, 45, 41], [42, 43, 46], [43, 47, 46], [44, 46, 48], [46, 50, 48], [49, 47, 45], [49, 51, 47], [48, 45, 44], [48, 49, 45], [46, 47, 50], [47, 51, 50], [48, 50, 52], [50, 54, 52], [53, 51, 49], [53, 55, 51], [52, 49, 48], [52, 53, 49], [50, 51, 54], [51, 55, 54], [52, 54, 56], [54, 58, 56], [57, 55, 53], [57, 59, 55], [56, 53, 52], [56, 57, 53], [54, 55, 58], [55, 59, 58], [56, 58, 60], [58, 62, 60], [61, 59, 57], [61, 63, 59], [60, 57, 56], [60, 61, 57], [58, 59, 62], [59, 63, 62], [60, 62, 64], [62, 66, 64], [65, 63, 61], [65, 67, 63], [64, 61, 60], [64, 65, 61], [62, 63, 66], [63, 67, 66], [64, 66, 68], [66, 70, 68], [69, 67, 65], [69, 71, 67], [68, 65, 64], [68, 69, 65], [66, 67, 70], [67, 71, 70], [68, 70, 72], [70, 74, 72], [73, 71, 69], [73, 75, 71], [72, 69, 68], [72, 73, 69], [70, 71, 74], [71, 75, 74], [72, 74, 76], [74, 78, 76], [77, 75, 73], [77, 79, 75], [76, 73, 72], [76, 77, 73], [74, 75, 78], [75, 79, 78], [76, 78, 80], [78, 82, 80], [81, 79, 77], [81, 83, 79], [80, 77, 76], [80, 81, 77], [78, 79, 82], [79, 83, 82], [80, 82, 84], [82, 86, 84], [85, 83, 81], [85, 87, 83], [84, 81, 80], [84, 85, 81], [82, 83, 86], [83, 87, 86], [84, 86, 88], [86, 90, 88], [89, 87, 85], [89, 91, 87], [88, 85, 84], [88, 89, 85], [86, 87, 90], [87, 91, 90], [88, 90, 92], [90, 94, 92], [93, 91, 89], [93, 95, 91], [92, 89, 88], [92, 93, 89], [90, 91, 94], [91, 95, 94], [92, 94, 96], [94, 98, 96], [97, 95, 93], [97, 99, 95], [96, 93, 92], [96, 97, 93], [94, 95, 98], [95, 99, 98], [96, 98, 100], [98, 102, 100], [101, 99, 97], [101, 103, 99], [100, 97, 96], [100, 101, 97], [98, 99, 102], [99, 103, 102], [100, 102, 104], [102, 106, 104], [105, 103, 101], [105, 107, 103], [104, 101, 100], [104, 105, 101], [102, 103, 106], [103, 107, 106], [104, 106, 108], [106, 110, 108], [109, 107, 105], [109, 111, 107], [108, 105, 104], [108, 109, 105], [106, 107, 110], [107, 111, 110], [108, 110, 112], [110, 114, 112], [113, 111, 109], [113, 115, 111], [112, 109, 108], [112, 113, 109], [110, 111, 114], [111, 115, 114], [112, 114, 116], [114, 118, 116], [117, 115, 113], [117, 119, 115], [116, 113, 112], [116, 117, 113], [114, 115, 118], [115, 119, 118], [116, 118, 120], [118, 122, 120], [121, 119, 117], [121, 123, 119], [120, 117, 116], [120, 121, 117], [118, 119, 122], [119, 123, 122], [120, 122, 124], [122, 126, 124], [125, 123, 121], [125, 127, 123], [124, 121, 120], [124, 125, 121], [122, 123, 126], [123, 127, 126], [124, 126, 128], [126, 130, 128], [129, 127, 125], [129, 131, 127], [128, 125, 124], [128, 129, 125], [126, 127, 130], [127, 131, 130], [128, 130, 132], [130, 134, 132], [133, 131, 129], [133, 135, 131], [132, 129, 128], [132, 133, 129], [130, 131, 134], [131, 135, 134], [132, 134, 136], [134, 138, 136], [137, 135, 133], [137, 139, 135], [136, 133, 132], [136, 137, 133], [134, 135, 138], [135, 139, 138], [136, 138, 140], [138, 142, 140], [141, 139, 137], [141, 143, 139], [140, 137, 136], [140, 141, 137], [138, 139, 142], [139, 143, 142], [140, 142, 144], [142, 146, 144], [145, 143, 141], [145, 147, 143], [144, 141, 140], [144, 145, 141], [142, 143, 146], [143, 147, 146], [144, 146, 148], [146, 150, 148], [149, 147, 145], [149, 151, 147], [148, 145, 144], [148, 149, 145], [146, 147, 150], [147, 151, 150], [148, 150, 152], [150, 154, 152], [153, 151, 149], [153, 155, 151], [152, 149, 148], [152, 153, 149], [150, 151, 154], [151, 155, 154], [152, 154, 156], [154, 158, 156], [157, 155, 153], [157, 159, 155], [156, 153, 152], [156, 157, 153], [154, 155, 158], [155, 159, 158], [0, 1, 2], [2, 1, 3], [158, 157, 156], [159, 157, 158]]);
		}
	}
}
/***********************************************
******      SolidPython code:      *************
************************************************
 
from solid import *
import random
import sys
from math import *
from random import *

sys.path.append( "../../../" )
from zack.lib.mat import *
from zack.lib.pathmat import *

import numpy as np
from scipy.interpolate import interp1d

x = np.linspace(0, 10, 10)
#y1 = [ 0, 1, 1, 1, 1, 2, 2, 2, 2, 1 ]
y1 = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
f1 = interp1d(x, y1, kind='cubic')

#y2 = [ 0, 1, 1, 2, 2, 3, 2, 2, 2, 1 ]
y2 = [ 2, 2, 2, 2, 2, 3, 2, 2, 2, 2 ]
f2 = interp1d(x, y2, kind='cubic')

def rev( flip, list ):
	if flip == 1:
		return [ list[2], list[1], list[0] ]
	return list

x_range = 40
points = []
for i in xrange(0,x_range):
	x = i/float(x_range) * 10.0
	y1 = f1( x )
	y2 = f2( x )

	points.append( [x,y1*0.3,0] )
	points.append( [x,y1,0] )

	points.append( [x,y2*0.3,1] )
	points.append( [x,y2,1] )

tris = []
for i in xrange(0,x_range-1):
	tris.append( rev( 1, [(i+1)*4+0,(i+0)*4+2,(i+0)*4+0] ) )
	tris.append( rev( 1, [(i+1)*4+0,(i+1)*4+2,(i+0)*4+2] ) )

	tris.append( rev( 1, [(i+0)*4+1,(i+0)*4+3,(i+1)*4+1] ) )
	tris.append( rev( 1, [(i+0)*4+3,(i+1)*4+3,(i+1)*4+1] ) )

	tris.append( rev( 1, [(i+0)*4+0,(i+0)*4+1,(i+1)*4+0] ) )
	tris.append( rev( 1, [(i+0)*4+1,(i+1)*4+1,(i+1)*4+0] ) )

	tris.append( rev( 0, [(i+0)*4+2,(i+0)*4+3,(i+1)*4+2] ) )
	tris.append( rev( 0, [(i+0)*4+3,(i+1)*4+3,(i+1)*4+2] ) )

tris.append( rev( 1, [2,1,0] ) )
tris.append( rev( 1, [3,1,2] ) )

tris.append( rev( 1, [(x_range-1)*4+0,(x_range-1)*4+1,(x_range-1)*4+2] ) )
tris.append( rev( 0, [(x_range-1)*4+3,(x_range-1)*4+1,(x_range-1)*4+2] ) )

seg = polyhedron( points=points, triangles=tris )

e = 0.037
segs = []
for r in xrange(1,100):
	segs.append(
		rotate( 15*r, [1,0,0] )(
			translate([9*exp(1.10*e*r),8*exp(1.10*e*r),2.6*exp(e*r)])(
				scale( [4.8*exp(e*r), 7.6*exp(e*r), 10*exp(e*r)] )(
					seg
				)
			)
		)
	)

all = difference()(
	union()(
		segs
	),
	translate([+1600,-1500,-1500])( cube([3000,3000,3000]) )
)

scad_render_to_file(
	segs[0], "spline.scad"
)
 
 
***********************************************/
                            
